@{
    ViewData["Title"] = "Home Page";
}

@model ReportOverviewApp.Models.HomeViewModels.HomeViewModel

<style>
    .caption-widget{
        text-align: center;
    }
    .widget-option-menu{
        text-align: left;
    }
    .table-scrollable{
        max-height: 240px;
        overflow: auto;
    }
    .card-scrollable {
        min-height: 15rem;
        max-height: 15rem;
        overflow: auto;
    }
</style>

<script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
<script src="~/js/HomeHandler.js" type="text/javascript"></script>
<h3 class="page-header">
    Overview (Home Page)
</h3>
<div class="col-sm-12">
        <p id="timeViewComponentContainer">
            @*@Component.InvokeAsync("TimeViewComponent")*@
        </p>
</div>
<div class="wigets-group">
    <div class="row">
        <div class="col-md-6">
            <div class="card border-dark card-scrollable">
                <div class="card-header">
                    <div class="card-header-tabs">
                        <ul class="nav nav-tabs card-header-tabs" id="widgetTabs">
                            <li class="nav-item">
                                <a id="todayTab" class="nav-link active">
                                    Today
                                </a>
                            </li>
                            <li class="nav-item">
                                <a id="weeklyTab" class="nav-link">
                                    One Week
                                </a>
                            </li>
                            <li class="nav-item">
                                <a id="totalTab" class="nav-link">
                                    Total
                                </a>
                            </li>
                        </ul>
                    </div>
                </div> 
                <div class="card-block">
                    <div class="card-body">
                        <h3 id="widgetTitle"class="card-title"><span class="fa fa-clock-o ld ld-float"></span></h3>
                        <h2 id="reportCount">
                            <i class="fa fa-refresh ld ld-spin"></i>
                        </h2>
                        <div id="reportLink">
                            @Html.ActionLink(linkText: "Go to reports", controllerName: "Reports", actionName: "Index", routeValues: new { begin=DateTime.Today, end=DateTime.Today}, htmlAttributes: new { @class = "btn btn-outline-primary" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border-dark card-scrollable">
                <div class="card-block">
                    <div class="card-body card-body-scrollable" id="reportCard">
                            <i class="fa fa-2x fa-refresh ld ld-spin"></i>
                    </div>
                </div>
            </div>
        </div>   
        <div class="col-sm-12" style="padding-top: 3rem;">
            <h4>User Logs</h4>
            <div class="col-sm-12">
                <div class="table-scrollable">
                    <table class="table table-sm table-bordered border-dark" id="userLogsTable">
                        <thead class="bg-secondary text-light">
                            <tr>
                                <th>Message</th>
                                @*<th>Changes</th>*@
                                <th>Timestamp</th>
                                <th>User</th>
                            </tr>
                        </thead>
                        <tbody id="userLogsBody">
                            <tr>
                                <td class="col-sm-7 text-center"><span class="fa fa-2x fa-refresh ld ld-spin"></span></td>
                                <td class="col-sm-2 text-center"><span class="fa fa-2x fa-refresh ld ld-spin"></span></td>
                                <td class="col-sm-3 text-center"><span class="fa fa-2x fa-refresh ld ld-spin"></span></td>
                            </tr>
                            @*@if (Model.UserLogs == null || Model.UserLogs.Count() == 0) {
                                <tr class="col-sm-12">
                                    <td>No logs present</td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            }
                            else {
                                @foreach (var log in Model.UserLogs.OrderByDescending(m => m.ID)) {
                                    <tr>
                                        <td class="col-sm-6">@log.Message</td>
                                        <td class="col-sm-6">@log.Changes</td>
                                        <td class="col-sm-3">@log.TimeStamp</td>
                                        <td class="col-sm-3">@Model.GetUserName(log.UserID)</td>
                                    </tr>
                                }
                            }*@
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        @*<div class="col-sm-6">
            <div class="progress">
                @{ int total = Model.Reports.Count(), upcoming = @Model.Reports.Where(r => r.Deadline() != null).Where(r => r.Deadline() >= DateTime.Today).Where(r => r.Deadline() <= DateTime.Today.AddDays(7)).Count(), error = Model.Reports.Where(r => r.Deadline() == null).Count(); }
                @{ int done = Model.Reports.Where(r => r.Done && r.ClientNotified && r.Sent).Count(); }
                @{ double sum = total; }
                @{ string totalReports = $"{((total - upcoming - error - done) / sum * 100)}%"; }
                @{ string upcomingReports = $"{upcoming / sum * 100}%"; }
                @{ string errorReports = $"{error / sum * 100}%"; }
                @{ string doneReports = $"{done / sum * 100}%"; }
                <div class="progress-bar progress-bar-info" style="width: @totalReports">
                    <span class="sr-only">@totalReports Complete (All)</span>
                </div>
                <div class="progress-bar progress-bar-success" style="width: @doneReports">
                    <span class="sr-only">@totalReports Complete (All)</span>
                </div>
                <div class="progress-bar progress-bar-warning" style="width: @upcomingReports">
                    <span class="sr-only">@upcomingReports (Upcoming)</span>
                </div>
                <div class="progress-bar progress-bar-danger" style="width: @errorReports">
                    <span class="sr-only">@errorReports (No Deadline)</span>
                </div>
            </div>
        </div>*@
    </div>
    <div>
        @*@await Html.PartialAsync("_Widget")*@
        @*<div class="widget-container col-sm-12">
            @foreach (var item in Model.Widgets)
            {
                <div class="widget-item col-sm-4">
                    @await Html.PartialAsync("_Widget", item)
                </div>
            }
        </div>*@
    </div>
</div>
@*<div class="wigdet-container">
    @await Html.PartialAsync("..\\Widgets\\Index", data.Widget)
</div>*@
