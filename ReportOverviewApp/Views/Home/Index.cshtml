@{
    ViewData["Title"] = "Overview";
}
@model ReportOverviewApp.Models.HomeViewModels.HomeViewModel
<h3>Overview (Home Page)</h3>
<hr/>

<div> 
    <div class="row">
        @*<div id="currentDateTimeContainer" class="col-12" style="padding-bottom: 2.5rem;">
            @await Component.InvokeAsync(name: "Time")
        </div>*@
        @*<div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-header-tabs">
                        <ul class="nav nav-tabs card-header-tabs" id="widgetTabs">
                            <li class="nav-item">
                                <a id="todayTab" class="nav-link active">
                                    Today
                                </a>
                            </li>
                            <li class="nav-item">
                                <a id="weeklyTab" class="nav-link">
                                    One Week
                                </a>
                            </li>
                            <li class="nav-item">
                                <a id="totalTab" class="nav-link">
                                    Total
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="card-block">
                    <div class="card-body">
                        <h4 id="widgetTitle" class="card-title"><span class="fas fa-clock ld ld-float"></span></h4>
                        <h2 id="reportCount">
                            <i class="fas fa-cog ld ld-spin"></i>
                        </h2>
                    </div>
                    <div class="card-footer">
                        <div id="reportLink">
                            @Html.ActionLink(linkText: "Go to reports", controllerName: "Reports", actionName: "Index", routeValues: new { begin = DateTime.Today, end = DateTime.Today }, htmlAttributes: new { @class = "btn btn-outline-primary" })
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card card-scrollable">
                <div class="card-block">
                    <div class="card-body card-body-scrollable" id="reportCard">
                            <i class="fas fa-2x fa-cog ld ld-spin"></i>
                    </div>
                </div>
            </div>
        </div>*@
        <div class="card-group col-md-12" style="padding-top: 2.5rem;">
            @await Component.InvokeAsync(name: "ReportDeadlineList", arguments: new { date = DateTime.Today.AddDays(-1) })
        
            @await Component.InvokeAsync(name: "ReportDeadlineList", arguments: new { date = DateTime.Today })
        
            @await Component.InvokeAsync(name: "ReportDeadlineList", arguments: new { date = DateTime.Today.AddDays(1) })
        </div>
        <div class="col-sm-12" id="userLogListContainer" style="padding-top: 2.5rem;">
            @await Component.InvokeAsync(name: "UserLogList")
        </div>
        <div class="col-sm-12" style="padding-top: 2.5rem; padding-bottom: 5.0rem;">
            <div class="card">
                <h6 class="card-header">Graph Data</h6>
                <div class="card-block">
                    <div id="chart"></div>
                </div>
            </div>

        </div>
    </div>
</div>
@section Scripts{ 
    <script src="~/js/Home/HomeHandler.js" type="text/javascript"></script>
    <script>
        let dates = ['x'];
        let reports = ['Reports_Due'];
        $.getJSON('/Data/GetDeadlinesCount/', function (data) {
            for (let kv in data) {
                dates.push(String(kv));
                reports.push(data[kv]);
            }
            let chart = c3.generate({
                bindto: '#chart',
                data: {
                    x: 'x',
                    columns: [
                        dates,
                        reports
                    ],
                    
                },
                bar: {
                    width: {
                        ratio: 0.25
                    }
                },
                grid: {
                    x: {
                        show: true

                    },
                    y: {
                        show: true
                    
                    }

                },
                zoom: {
                    enabled: true
                },
                 axis: {
                    x: {
                        type: 'timeseries',
                        tick: {
                            format: '%Y-%m-%d'
                        }
                    }
                }
            });
        });

        //setTimeout(function () {
        //    chart.load({
        //        columns: [
        //            ['data1', 230, 190, 300, 100, 300, 400]
        //        ]
        //    });
        //}, 1000);

        //setTimeout(function () {
        //    chart.load({
        //        columns: [
        //            ['data3', 130, 150, 200, 300, 200, 100]
        //        ]
        //    });
        //}, 1500);

    </script>
}