@{
    ViewData["Title"] = "Home Page";
}

@model ReportOverviewApp.Models.HomeViewModels.HomeViewModel
@*model of view needs to be changed to a bigger viewmodel*@

<style>
    .caption-widget{
        text-align: center;
    }
    .widget-option-menu{
        text-align: left;
    }
    .table-scrollable{
        max-height: 240px;
        overflow: auto;
    }
</style>
<h3 class="page-header">
    Overview (Home Page)
</h3>

<div class="wigets-group">
    <div class="row">
        <div class="col-sm-4">
            <div class="thumbnail">
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="dropdown" aria-haspopup="true">
                        <span class="glyphicon glyphicon-menu-hamburger widget-option-menu"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="#">Edit Actions</a></li>
                        <li><a href="#">Change Color</a></li>
                        <li><a href="#">Copy Widget</a></li>
                        <li><a href="#">Delete Widget</a></li>
                    </ul>
                </div>
                <div class="caption caption-widget">
                    <h3>Total Reports</h3>
                    <h1>@Html.ActionLink(@Model?.Reports?.Count().ToString(), "../Reports/Index", new { }) </h1>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="thumbnail">
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="dropdown" aria-haspopup="true">
                        <span class="glyphicon glyphicon-menu-hamburger widget-option-menu"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="#">Edit Actions</a></li>
                        <li><a href="#">Change Color</a></li>
                        <li><a href="#">Copy Widget</a></li>
                        <li><a href="#">Delete Widget</a></li>
                    </ul>
                </div>
                <div class="caption caption-widget">
                    <h3>Upcoming Reports (1 Week)</h3>
                    <h1>@Html.ActionLink(@Model.Reports.Where(r => r.Deadline() != null).Where(r => r.Deadline() >= DateTime.Today).Where(r => r.Deadline() <= DateTime.Today.AddDays(7)).Count().ToString(), "../Reports/Index", new { begin = DateTime.Today, end = DateTime.Today.AddDays(7) })</h1>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="thumbnail">
                <div class="btn-group">
                    <button type="button" class="btn btn-default" data-toggle="dropdown" aria-haspopup="true">
                        <span class="glyphicon glyphicon-menu-hamburger widget-option-menu"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li><a href="#">Edit Actions</a></li>
                        <li><a href="#">Change Color</a></li>
                        <li><a href="#">Copy Widget</a></li>
                        <li><a href="#">Delete Widget</a></li>
                    </ul>
                </div>
                <div class="caption caption-widget">
                    <h3>Reports Due Today</h3>
                    <h1>@Html.ActionLink(@Model.Reports.Where(r => r.Deadline() != null).Where(r => r.Deadline() == DateTime.Today).Count().ToString(), "../Reports/Index", new { begin = DateTime.Today, end = DateTime.Today })</h1>
                </div>
            </div>
        </div>
        <div class="col-sm-12">
            <h4>User Logs</h4>
            <div class="col-sm-12">
                <div class="table-scrollable">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Message</th>
                                <th>Changes</th>
                                <th>Timestamp</th>
                                <th>User</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.UserLogs == null || Model.UserLogs.Count() == 0) {
                                <tr>
                                    <td>No logs present</td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            }
                            else {
                                @foreach (var log in Model.UserLogs.OrderByDescending(m => m.ID)) {
                                    <tr>
                                        <td class="col-sm-2">@log.Message</td>
                                        <td class="col-sm-6">@log.Changes</td>
                                        <td class="col-sm-2">@log.TimeStamp</td>
                                        <td class="col-sm-2">@Model.GetUserName(log.UserID)</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        @*<div class="col-sm-6">
            <div class="progress">
                @{ int total = Model.Reports.Count(), upcoming = @Model.Reports.Where(r => r.Deadline() != null).Where(r => r.Deadline() >= DateTime.Today).Where(r => r.Deadline() <= DateTime.Today.AddDays(7)).Count(), error = Model.Reports.Where(r => r.Deadline() == null).Count(); }
                @{ int done = Model.Reports.Where(r => r.Done && r.ClientNotified && r.Sent).Count(); }
                @{ double sum = total; }
                @{ string totalReports = $"{((total - upcoming - error - done) / sum * 100)}%"; }
                @{ string upcomingReports = $"{upcoming / sum * 100}%"; }
                @{ string errorReports = $"{error / sum * 100}%"; }
                @{ string doneReports = $"{done / sum * 100}%"; }
                <div class="progress-bar progress-bar-info" style="width: @totalReports">
                    <span class="sr-only">@totalReports Complete (All)</span>
                </div>
                <div class="progress-bar progress-bar-success" style="width: @doneReports">
                    <span class="sr-only">@totalReports Complete (All)</span>
                </div>
                <div class="progress-bar progress-bar-warning" style="width: @upcomingReports">
                    <span class="sr-only">@upcomingReports (Upcoming)</span>
                </div>
                <div class="progress-bar progress-bar-danger" style="width: @errorReports">
                    <span class="sr-only">@errorReports (No Deadline)</span>
                </div>
            </div>
        </div>*@
    </div>
    <div>
        @*@await Html.PartialAsync("_Widget")*@
        @*<div class="widget-container col-sm-12">
            @foreach (var item in Model.Widgets)
            {
                <div class="widget-item col-sm-4">
                    @await Html.PartialAsync("_Widget", item)
                </div>
            }
        </div>*@
    </div>
</div>
@*<div class="wigdet-container">
    @await Html.PartialAsync("..\\Widgets\\Index", data.Widget)
</div>*@
