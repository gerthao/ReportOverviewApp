@model ReportOverviewApp.Models.ReportViewModels.SelectPlanViewModel

@{
    ViewData["Title"] = "Select Plan";
}
<h4>Select Plan</h4>
<hr />
<h6 style="padding-bottom:1.0rem;">Clicking on a state will filter to associated plans.&nbsp;&nbsp;Clicking on a plan option will display reports under that plan through the reporting catalouge.</h6>
<div id="selectPlanForm" class="container">
    <form>
        @if (Model == null || Model.Plans == null || Model.Plans.Count() == 0)
        {
            <div class="row">
                <div class="col-md-12 list-group">
                    <p class="list-group-item bg-danger"><strong>No States Or Plans Found</strong></p>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-md-3 list-group">
                    <p class="list-group-item"><strong>Select State</strong></p>
                    @foreach (var stateItem in Model.Plans.Select(p => p.State).OrderBy(s => s.PostalAbbreviation).Distinct())
                    {
                            <p class="list-group-item list-group-item-action">@stateItem.PostalAbbreviation</p>
                    }
                </div>
                <div id="planListGroup" class="col-md-6 list-group">
                    <p class="list-group-item"><strong>Select Plan</strong></p>
                    <div id="selectPlanListViewComponent">
                        @await Component.InvokeAsync("SelectPlanList", Model.State)
                    </div>
                </div>
            </div>
        }
    </form>
</div>



@section Scripts {
    <script type="text/javascript" src="~/js/Reports/SelectPlan.js"></script>
    
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}